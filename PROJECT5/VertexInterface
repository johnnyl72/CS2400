package Homework5;

public interface VertexInterface<T> {
//gets this vertex's label
public T getLabel();
//marks this vertex as visited
public void visit();
//remove this vertex's visited mark
public void unvisit();
//determines whether this vertex is marked visited
public boolean isVisited();
//connects this vertex and a given vertex with a weighted edge
public boolean connect(VertexInterface<T> endVertex, double edgeWeight);
//connects this vertex and a given vertex with an unweight edge
public boolean connect(VertexInterface<T> endVertex);
//sees if this vertex has atleast 1 neighbor
public boolean hasNeightbor();
//gets an unvisited neightbor, if any from this vertex, null if none
public VertexInterface<T> getUnvisitedNeighbor();
//records the previous vertex on a path to this vertex
public void setPredecessor(VertexInterface<T> predecessor);
//gets the recorded predecessor of this vertex
public VertexInterface<T> getPredecessor();
// sees whether a predecessor was recorded for this vertex
public boolean hasPredecessor();
//records the cost of a path to this vertex
public void setCost(double newCost);
//gets recorded cost of the path to this vertex
public double getCost();

}
