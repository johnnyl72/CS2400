package Homework5;

import java.util.Iterator;
import java.util.LinkedList;

public class Graph{
	private boolean[][] edges; // edges[i][j] is true iff a vertex from i to j
	private char[] labels; // labels[i] contains the label for vertex i
	
	@SuppressWarnings("unchecked")
	public Graph(int n) { 
		edges = new boolean[n][n]; // All values initially false 
		labels = new char[n]; // All values initially null 
	}
	// Accessor method to get the label of a vertex of this Graph 
	public char getLabel(int vertex) { 
		return labels[vertex]; 
	}
	// Test whether an edge exists 
	public boolean isEdge(int source, int target) {
		return edges[source][target]; 
	}
	// Add an edge 
	public void addEdge(int source, int target) { 
		edges[source][target] = true; 
	}	
	// Change the label of a vertex of this Graph 
	public void setLabel(int vertex, char newLabel) { 
		labels[vertex] = newLabel; 
	}
	// Accessor method to determine the number of vertices in this Graph 
	public int size() { 
		return labels.length; 
	}
	public void getBFS(int vertexOrigin) {
		boolean visited[] = new boolean[9];
		
		LinkedList<Integer> queue = new LinkedList<Integer>(); 
        // Mark the current node as visited and enqueue it 
        visited[vertexOrigin] = true; 
        queue.add(vertexOrigin); 
        
        //repeat this while loop until the queue is empty (a.k.a done traversing)
        while(queue.size() != 0) {
        	// Dequeue a vertex from queue and print it 
        	vertexOrigin = queue.poll(); 
            System.out.print(vertexOrigin+" "); 
            
            //gather all the labels' neighbors
            int i; 
    		int count = 0; 
    		for (i = 0; i < labels.length; i++) { 
    			if (edges[vertexOrigin][i]) 
    				count++; 
    		} 
    		int[] answer = new int[count]; 
    		count = 0;
    		for (i = 0; i < labels.length; i++) {
    			if (edges[vertexOrigin][i]) 
    				answer[count++] = i;
    		}
    		
    		//get all neighbors of vertexOrigin, if not visited, mark visit and add to queue
    		for(int j = 0; j < answer.length; j++) {
    			int n = answer[j];
    			
    			 if (!visited[n]) 
                 { 
                     visited[n] = true; 
                     queue.add(n); 
                 } 
    		}
    				
    		
        
            
        }
  
	}
}
