package Homework5;

import java.util.Iterator;

public class Vertex<T> implements VertexInterface<T> {
	private T label;
	private ListWithIteratorInterface<Edge> edgeList; //edges to neighbors
	private boolean visited;
	private VertexInterface<T> previousVertex;
	private double cost;
	public Vertex(T vertexLabel) {
		label = vertexLabel;
		edgeList = new LinkedListWithIterator<>();
		visited = false;
		previousVertex = null;
		cost = 0;
	}
	public boolean connect(VertexInterface<T> endVertex, double edgeWeight) {
		boolean result = false;
		if(!this.equals(endVertex)) {
			Iterator<VertexInterface<T>> neighbors = getNeighborIterator();
			boolean duplicateEdge = false;
			while(!duplicateEdge && neighbors.hasNext()) {
				VertexInterface<T> nextNeighbor = neighbors.next();
				if(endVertex.equals(nextNeighbor))
					duplicateEdge = true;
			}
			if(!duplicateEdge) {
				edgeList.add(new Edge(endVertex, edgeWeight));
				result = true;
			}
		}
		return result;
	}
	public boolean hasNeighbor() {
		return !edgeList.isEmpty();
	}
	public VertexInterface<T> getUnvisitedNeighbor(){
		VertexInterface<T> result = null;
		Iterator<VertexInterface<T>> neighbors = getNeighborIterator();
		while( neighbors.hasNext() && (result = null)) {
			VertexInterface<T> nextNeighbor = neighbors.next();
			if(!nextNeighbor.isVisited())
				result = nextNeighbor;
		}
		return result;
	}
	public boolean equals(Object other) {
		boolean result;
		if ((other == null) || (getClass() != other.getClass()))
			result = false;
		else {
			@SuppressWarnings("unchecked")
			Vertex<T> otherVertex = (Vertex<T>)other;
			result = label.equals(otherVertex.label);
		}
		return result;
	}
	/** INNER CLASS OF VERTEX */
	protected class Edge{
	private VertexInterface<T> vertex; //vertex at end of edge
	private double weight;
	protected Edge(VertexInterfacce<T> endVertex, double edgeWeight) {
		vertex = endVertex;
		weight = edgeWeight;	
	}
	protected VertexInterface<T> getEndVertex(){
		return vertex;
	}
	protected double getWeight() {
		return weight;
	}
	}//end of Edge
	/** Private class */
	private class NeighborIterator implements Iterator<VertexInterface<T>>{
		private Iterator<Edge> edges;
		private NeighborIterator() {
			edges = edgeList.getIterator();
		}
		public boolean hasNext() {
			return edges.hasNext();
		}
		public VertexInterface<T> next(){
			VertexInterface<T> nextNeighbor = null;
			if(edges.hasNext()) {
				Edge edgeToNextNeighbor = edges.next();
				nextNeighbor = edgeToNextNeighbor.getEndVertex();
			}
			else
				System.out.println("Error");
			return nextNeighbor;
		}
		public void remove() {
			throw new UnsupportedOperationException();
		}
		
	}

}
