package cs2400;

import java.util.Arrays;

public class ResizeableArrayBag<T> implements BagInterface<T> {
	private T[] bag;
	private static final int DEFAULT_CAPACITY = 5;
	private int numberOfEntries;
	private boolean integrityOK = false;
	private static final int MAX_CAPACITY = 5;
	
	public ResizeableArrayBag() {
		this(DEFAULT_CAPACITY);
	}
	
	public ResizeableArrayBag(int capacity) {
		if(capacity <= MAX_CAPACITY) {
		@SuppressWarnings("unchecked")
		T[] tempBag = (T[])new Object[capacity];
		bag = tempBag;
		numberOfEntries = 0;
		integrityOK = true;
		}
		else
			throw new IllegalStateException("Bag created exceeds allowed limit");
	} 
	
	private void checkIntegrity() {
		if(!integrityOK)
			throw new SecurityException("ArrayBag object is corrupt");
		}
	
	private int getIndexOf(T anEntry) {
		int where = -1;
		boolean found = false;
		int index = 0;
		while(!found && (index < numberOfEntries)) {
			if(anEntry.equals(bag[index])) {
				found = true;
				where = index;
			}
				index++;
		}
		return where;
	}
	
	private T removeEntry(int givenIndex) {
		T result = null;
		if(!isEmpty() && (givenIndex >= 0)) {
			result = bag[givenIndex];
			bag[givenIndex] = bag[numberOfEntries -1];
			bag[numberOfEntries - 1] = null;
			numberOfEntries--;
		}
		return result;
	}
	
	private void checkCapacity(int capacity){
		if(capacity > MAX_CAPACITY)
			System.out.println("You have added more items in the bag bigger than"
					+ " the exceeded maximum of " + MAX_CAPACITY + ".\n"
							+ "Will now double the size of array to: " + bag.length * 2);
	}
	private void doubleCapacity() {
		int newLength = 2*bag.length;
		checkCapacity(newLength);
		bag = Arrays.copyOf(bag, newLength);
	}
	
	public boolean add(T newEntry) {
		checkIntegrity();
		if (isFull()) {
			doubleCapacity();
		}
		bag[numberOfEntries] = newEntry;
		numberOfEntries++;
		return true;
	}
	
	public int getCurrentSize() {
		return numberOfEntries;
	}
	
	public boolean isFull() {
		return numberOfEntries == bag.length;
	}
	
	public boolean isEmpty() {
		return numberOfEntries == 0;
	}
	
	public T remove() {
		checkIntegrity();
		T result = removeEntry(numberOfEntries - 1);
		return result;
	}
	
	public boolean remove(T anEntry) {
		checkIntegrity();
		int index = getIndexOf(anEntry);
		T result = removeEntry(index);
		return anEntry.equals(result);
	}
	
	public void clear() {
		while(!isEmpty()) {
			remove();
		}
	}
	
	public int getFrequency(T anEntry) {
		checkIntegrity();
		int counter = 0;
		
		for(int index =0; index < numberOfEntries; index++) {
			if(anEntry.equals(bag[index])) {
				counter++;
			}
		}//end of for
		return counter;
	}
	
	public boolean contains(T anEntry) {
		checkIntegrity();
		return getIndexOf(anEntry) > -1;
	}
	
	public T[] toArray() {
		@SuppressWarnings("unchecked")
		T[] result = (T[])new Object[numberOfEntries];
		for (int index = 0; index < numberOfEntries; index++) {
			result[index] = bag[index];
		}
		return result;
		}
}
	
