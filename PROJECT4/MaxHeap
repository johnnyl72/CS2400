package Homework4;

import java.util.Arrays;

public class MaxHeap <T extends Comparable<? super T>> implements MaxHeapInterface<T>{
	
	private T[] heap;
	private int lastIndex;
	private int swaps;
	private boolean initialized=  false;
	private static final int DEFAULT_CAPACITY = 100;
	public MaxHeap() {
		this(DEFAULT_CAPACITY);
	}//end default constructor
	
	public MaxHeap(int initialCapacity) {

	@SuppressWarnings("unchecked")
	T[] tempHeap = (T[]) new Comparable[initialCapacity +1];
	heap = tempHeap;
	lastIndex = 0;
	swaps = 0;
	}// end of constructor
	
	public MaxHeap(T[] entries) {
		this(entries.length);
		lastIndex = entries.length;
		for(int index = 0; index < entries.length; index++) {
			heap[index + 1] = entries[index];
		}
		
		for(int rootIndex = lastIndex / 2; rootIndex > 0; rootIndex--) {
			
			reheap(rootIndex);
		}
	}
	
	public int getSwaps() {
		return swaps;
	}
	
	//add method is O(log n) in the worst case,creating with this is O(n log n)
	public void add(T newEntry) {
		int newIndex = lastIndex + 1;
		int parentIndex = newIndex / 2;
		while( (parentIndex > 0) && newEntry.compareTo(heap[parentIndex]) >0) {
			heap[newIndex] = heap[parentIndex];
			newIndex = parentIndex;
			parentIndex = newIndex /2;
			swaps++;
		}
		heap[newIndex] = newEntry;
		lastIndex++;
	}
	//removeMax is an O(log n) operation in the worst case
	public T removeMax() {
		T root = null;
		if(!isEmpty()) {
			root = heap[1];
			heap[1] = heap[lastIndex];
			lastIndex--;
			reheap(1);
		}
		return root;
	}//end removeMax
	
	// reheap is an O(log n) operation,
	// creating with this is O(n) which is also equivalent O( 2^h)   
	private void reheap(int rootIndex) {
		boolean done = false;
		T orphan = heap[rootIndex];
		int leftChildIndex = 2 * rootIndex;
		
		while(!done && (leftChildIndex <= lastIndex) ) {
			int largerChildIndex = leftChildIndex;
			int rightChildIndex = leftChildIndex +1;
			if( (rightChildIndex <= lastIndex) &&
				 heap[rightChildIndex].compareTo(heap[largerChildIndex]) > 0) {
				largerChildIndex = rightChildIndex;
				
			}
			if(orphan.compareTo(heap[largerChildIndex]) < 0) {
				heap[rootIndex] = heap[largerChildIndex];
				rootIndex = largerChildIndex;
				leftChildIndex = 2* rootIndex;
				
			}
			else
				done = true;
			swaps++;
		}
		heap[rootIndex] = orphan; 	
	}// end reheap 	
	
	public T getMax() {
		T root = null;
		if(!isEmpty())
			root = heap[1];
		return root;
	}
	public boolean isEmpty() {
		return lastIndex < 1;
	}
	public int getSize() {
		return lastIndex;
	}
	public void clear() {
		while(lastIndex > -1) {
			heap[lastIndex] = null;
			lastIndex--;
		}
		lastIndex = 0;
	}
	public void print(int n) {
		int i;
		for( i = 0; i < n; i++ ) {
			System.out.print(heap[i+1]);
			if(i != lastIndex - 1)
				System.out.print(",");
		}
		if( i != lastIndex)
			System.out.println("... ");
	}
	
}
