package Homework3;

public class BinarySearchTree<T extends Comparable<? super T>> extends BinaryTree<T> 
												   implements SearchTreeInterface<T>{
	T result;
	/** predecessor is instance field and updated to keep track 
	 	of parent node before every inorder traverse
	 **/
	BinaryNode<T> predecessor;
	/** successor is instance field and updated to keep track 
 		of parent node before every inorder traverse
	 **/
	BinaryNode<T> successor;
	
	public BinarySearchTree() {
		super();
	}
	public BinarySearchTree(T rootEntry) {
		super();
		setRootNode(new BinaryNode<T>(rootEntry));
	}
	public void setTree(T rootData) {
		throw new UnsupportedOperationException();
	}
	public void setTree(T rootData, BinaryTreeInterface<T> leftTree, BinaryTreeInterface<T> rightTree) {
		throw new UnsupportedOperationException();
	}
	
	
	public boolean contains(T entry) {
		return getEntry(entry) != null;
	}
	public T getEntry(T entry) {
		return findEntry(getRootNode(), entry);
		
	}
	private T findEntry(BinaryNode<T> rootNode, T entry) {
		T result = null;
		
		if(rootNode != null) {
			T rootEntry = rootNode.getData();
			if(entry.equals(rootEntry))
				result = rootEntry;
			else if(entry.compareTo(rootEntry) < 0)	
				result = findEntry(rootNode.getLeftChild(), entry);
			else
				result = findEntry(rootNode.getRightChild(), entry);
		}
		return result;
	}//end findEntry
	

	
	public T getPredecessor(T entry) {
		return getPredecessor(getRootNode(), entry);
	}
	//rightmost on the left subtree
	private T getPredecessor(BinaryNode<T> rootNode, T entry) {
		//if the rootnode is null, it will return null (never happen)
		if(rootNode == null)
			result = null;
		//the entry is the smaller number, therefore no predecessor
		if(entry == rootNode.getLeftmostData())
			result = null;
		//the entry is found at a specific node
		if(rootNode.getData() == entry) {
			// case 1: will go left subtree and find rightmost data
			if(rootNode.getLeftChild() != null) {
				result = rootNode.getLeftChild().getRightmost().getData();
			}
			// case 2: the entry is a leaf and must traverse up to obtain predecessor
			else {
				
				while(predecessor != null && rootNode == predecessor.getLeftChild()) {
					predecessor.setParent(predecessor);
					rootNode = predecessor.getParent();				
				}
				
				if(predecessor == null) {
					predecessor = null;
				}
				else {
					result = predecessor.getData();
				}
			}	
		}
		// the entry is smaller than the current node
		else if(rootNode.getData().compareTo(entry) > 0) {
			//obtain the parent node before traversing further in
			
			if(rootNode.getData().compareTo(entry) < 0) {
			rootNode.setParent(rootNode);
			predecessor = rootNode.getParent();
			}
			getPredecessor(rootNode.getLeftChild(), entry);
		}
		//the entry is bigger than the current node
		else {
			//obtain the parent node before traversing further in
			//condition is to only allow parent nodes smaller than the entry
			if(rootNode.getData().compareTo(entry) < 0) {
			rootNode.setParent(rootNode);
			predecessor = rootNode.getParent();
			}
			getPredecessor(rootNode.getRightChild(),entry);
		}
		return result;
			
	}//end getPredecessor

	public T getSuccessor(T entry) {
		return getSuccessor(getRootNode(), entry);
	}
	//leftmost on right subtree to find successor
	private T getSuccessor(BinaryNode<T> rootNode, T entry) {
		if(rootNode == null)
			result = null;
		if(entry == rootNode.getRightmostData())
			result = null;
		if(rootNode.getData() == entry) {
			if(rootNode.getRightChild() != null) {
				result = rootNode.getRightChild().getLeftmost().getData();
			}
		
			else {
				
				while(successor != null && rootNode == successor.getRightChild()) {
					successor.setParent(successor);
					rootNode = successor.getParent();				
				}
				if(successor == null) {
					successor = null;
				}
				else {
					result = successor.getData();
				}
			}	
		}
		// the entry is smaller than the current node
		else if(rootNode.getData().compareTo(entry) > 0) {
			//set the successor only if it is bigger than the entry
			if(rootNode.getData().compareTo(entry) > 0) {
				rootNode.setParent(rootNode);
				successor = rootNode.getParent();
			}
			getSuccessor(rootNode.getLeftChild(),entry);
		}
		//the entry is bigger than the current node
		else {
			//set the successor only if it is bigger than the entry
			if(rootNode.getData().compareTo(entry) > 0) {
				rootNode.setParent(rootNode);
				successor = rootNode.getParent();
			}
			getSuccessor(rootNode.getRightChild(),entry);
		}
		return result;
	}//end getSuccesor

	public T add(T newEntry) {
		T result = null;
		if(isEmpty())
			setRootNode(new BinaryNode<T>(newEntry));
		else
			result = addEntry(getRootNode(), newEntry);
		return result;
	}
	//adding entry using recursion
	private T addEntry(BinaryNode<T> rootNode, T newEntry) {
		assert rootNode != null;
		T result = null;
		int comparison = newEntry.compareTo(rootNode.getData());
		
		if(comparison == 0) {
			result = rootNode.getData();
			rootNode.setData(newEntry);
		}
		else if(comparison < 0) {
			if(rootNode.hasLeftChild())
				result = addEntry(rootNode.getLeftChild(), newEntry);
			else
				rootNode.setLeftChild(new BinaryNode<T>(newEntry));
		}
		else {
			assert comparison > 0;
			if(rootNode.hasRightChild())
				result = addEntry(rootNode.getRightChild(), newEntry);
			else
				rootNode.setRightChild(new BinaryNode<T>(newEntry));
		}
		
		return result;
	}
	// ReturnOjbect is an inner class with a single data field 
	public class ReturnObject{
		T entry;
		public ReturnObject(T oldEntry) {
			entry = oldEntry;
		}
		public T get() {
			return entry;
		}
		public void set(T newEntry) {
			this.entry = newEntry;
		}
	}
	public T remove(T entry) {
		ReturnObject oldEntry = new ReturnObject(null);
		BinaryNode<T> newRoot = removeEntry(getRootNode(), entry, oldEntry);
		setRootNode(newRoot);
		return oldEntry.get();
	}
	//removing entry using recursion
	private BinaryNode<T> removeEntry(BinaryNode<T> rootNode, T entry, ReturnObject oldEntry){
		if(rootNode != null) {
			T rootData = rootNode.getData();
			int comparison = entry.compareTo(rootData);
			if(comparison == 0) {
				oldEntry.set(rootData);
				rootNode = removeFromRoot(rootNode);
			}
			else if(comparison < 0) {
				BinaryNode<T> leftChild = rootNode.getLeftChild();
				BinaryNode<T> subtreeRoot = removeEntry(leftChild,entry,oldEntry);
				rootNode.setLeftChild(subtreeRoot);
			}
			else {
				BinaryNode<T> rightChild = rootNode.getRightChild();
				rootNode.setRightChild(removeEntry(rightChild,entry,oldEntry));
			}
		}
		return rootNode;
	}//end of removeEntry
	
	//used for remove()
	private BinaryNode<T> removeFromRoot(BinaryNode<T> rootNode){
		// case 1 : rootNode has 2 children
		if(rootNode.hasLeftChild() && rootNode.hasRightChild()) {
			BinaryNode<T> leftSubtreeRoot = rootNode.getLeftChild();
			BinaryNode<T> largestNode = findLargest(leftSubtreeRoot);
			
			//replace entry in root
			rootNode.setData(largestNode.getData());
			
			//remove node with largest entry in left subtree
			rootNode.setLeftChild(removeLargest(leftSubtreeRoot));
		}
		// case 2 : rootNode has at most one child
		else if(rootNode.hasRightChild())
			rootNode = rootNode.getRightChild();
		else 
			rootNode = rootNode.getLeftChild();
		
		return rootNode;
	}
	//used for remove()
	private BinaryNode<T> findLargest(BinaryNode<T> rootNode){
		if(rootNode.hasRightChild())
			rootNode = findLargest(rootNode.getRightChild());
		return rootNode;
	}
	//used for remove()
	private BinaryNode<T> removeLargest(BinaryNode<T> rootNode){
		if(rootNode.hasRightChild()) {
			BinaryNode<T> rightChild = rootNode.getRightChild();
			BinaryNode<T> root = removeLargest(rightChild);
			rootNode.setRightChild(root);
		}
		else
			rootNode = rootNode.getLeftChild();
		
		return rootNode;
	}
}
