package Homework3;

public class BinarySearchTree<T extends Comparable<? super T>> extends BinaryTree<T> 
												   implements SearchTreeInterface<T>{
	public BinarySearchTree() {
		super();
	}
	public BinarySearchTree(T rootEntry) {
		super();
		setRootNode(new BinaryNode<T>(rootEntry));
	}
	public void setTree(T rootData) {
		throw new UnsupportedOperationException();
	}
	public void setTree(T rootData, BinaryTreeInterface<T> leftTree, BinaryTreeInterface<T> rightTree) {
		throw new UnsupportedOperationException();
	}
	
	public T getEntry(T entry) {
		return findEntry(getRootNode(), entry);
		
	}
	private T findEntry(BinaryNode<T> rootNode, T entry) {
		T result = null;
		
		if(rootNode != null) {
			T rootEntry = rootNode.getData();
			if(entry.equals(rootEntry))
				result = rootEntry;
			else if(entry.compareTo(rootEntry) < 0)
				result = findEntry(rootNode.getLeftChild(), entry);
			else
				result = findEntry(rootNode.getRightChild(), entry);
		}
		return result;
	}//end findEntry
	
	public boolean contains(T entry) {
		return getEntry(entry) != null;
	}
	
	public T getPredecessor(T entry) {
		return getPredecessor(getRootNode(), entry);
	}
	
	
	private T getPredecessor(BinaryNode<T> rootNode, T entry) {
		T result = null;
		BinaryNode<T> tempNode;
		if(rootNode != null) {
			T rootEntry = rootNode.getData();
			
			if(entry.compareTo(rootEntry) == 0) {
				if(rootNode.hasLeftChild() && rootNode.hasRightChild()) {
				tempNode = rootNode.getLeftChild();
				result = tempNode.getRightmostData();
				}
				else if(!rootNode.hasRightChild()){
					tempNode = rootNode.getLeftChild();
					result = tempNode.getData();
				}
			}
			else if(entry.compareTo(rootEntry) > 0)
				result = getPredecessor(rootNode.getRightChild(), entry);
			else{
				result = getPredecessor(rootNode.getLeftChild(), entry);
			}
			
		}
		
		return result;
	}//end getPredecessor
	
	
	
	
	
	
	
	public T getSuccessor(T entry) {
		return getSuccessor(getRootNode(), entry);
	}
	//only works when it has right children
	private T getSuccessor(BinaryNode<T> rootNode, T entry) {
		T result = null;
		BinaryNode<T> tempNode = null;
		if(rootNode != null) {
			T rootEntry = rootNode.getData();
			
			if(entry.compareTo(rootEntry) == 0) {
				tempNode = rootNode.getRightChild();
				result = tempNode.getData();
			}
			else if(entry.compareTo(rootEntry) > 0)
				result = getSuccessor(rootNode.getRightChild(), entry);
			else
				result = getSuccessor(rootNode.getLeftChild(), entry);
		}
		return result;
	}//end getSuccesor

	public T add(T newEntry) {
		T result = null;
		if(isEmpty())
			setRootNode(new BinaryNode<T>(newEntry));
		else
			result = addEntry(getRootNode(), newEntry);
		return result;
	}
	//adding entry using recursion
	private T addEntry(BinaryNode<T> rootNode, T newEntry) {
		assert rootNode != null;
		T result = null;
		int comparison = newEntry.compareTo(rootNode.getData());
		
		if(comparison == 0) {
			result = rootNode.getData();
			rootNode.setData(newEntry);
		}
		else if(comparison < 0) {
			if(rootNode.hasLeftChild())
				result = addEntry(rootNode.getLeftChild(), newEntry);
			else
				rootNode.setLeftChild(new BinaryNode<T>(newEntry));
		}
		else {
			assert comparison > 0;
			if(rootNode.hasRightChild())
				result = addEntry(rootNode.getRightChild(), newEntry);
			else
				rootNode.setRightChild(new BinaryNode<T>(newEntry));
		}
		
		return result;
	}
	// ReturnOjbect is an inner class with a single data field 
	public class ReturnObject{
		T entry;
		public ReturnObject(T oldEntry) {
			entry = oldEntry;
		}
		public T get() {
			return entry;
		}
		public void set(T newEntry) {
			this.entry = newEntry;
		}
	}
	public T remove(T entry) {
		ReturnObject oldEntry = new ReturnObject(null);
		BinaryNode<T> newRoot = removeEntry(getRootNode(), entry, oldEntry);
		setRootNode(newRoot);
		return oldEntry.get();
	}
	//removing entry using recursion
	private BinaryNode<T> removeEntry(BinaryNode<T> rootNode, T entry, ReturnObject oldEntry){
		if(rootNode != null) {
			T rootData = rootNode.getData();
			int comparison = entry.compareTo(rootData);
			if(comparison == 0) {
				oldEntry.set(rootData);
				rootNode = removeFromRoot(rootNode);
			}
			else if(comparison < 0) {
				BinaryNode<T> leftChild = rootNode.getLeftChild();
				BinaryNode<T> subtreeRoot = removeEntry(leftChild,entry,oldEntry);
				rootNode.setLeftChild(subtreeRoot);
			}
			else {
				BinaryNode<T> rightChild = rootNode.getRightChild();
				rootNode.setRightChild(removeEntry(rightChild,entry,oldEntry));
			}
		}
		return rootNode;
	}//end of removeEntry

	private BinaryNode<T> removeFromRoot(BinaryNode<T> rootNode){
		// case 1 : rootNode has 2 children
		if(rootNode.hasLeftChild() && rootNode.hasRightChild()) {
			BinaryNode<T> leftSubtreeRoot = rootNode.getLeftChild();
			BinaryNode<T> largestNode = findLargest(leftSubtreeRoot);
			
			//replace entry in root
			rootNode.setData(largestNode.getData());
			
			//remove node with largest entry in left subtree
			rootNode.setLeftChild(removeLargest(leftSubtreeRoot));
		}
		// case 2 : rootNode has at most one child
		else if(rootNode.hasRightChild())
			rootNode = rootNode.getRightChild();
		else 
			rootNode = rootNode.getLeftChild();
		
		return rootNode;
	}
	private BinaryNode<T> findLargest(BinaryNode<T> rootNode){
		if(rootNode.hasRightChild())
			rootNode = findLargest(rootNode.getRightChild());
		return rootNode;
	}
	private BinaryNode<T> removeLargest(BinaryNode<T> rootNode){
		if(rootNode.hasRightChild()) {
			BinaryNode<T> rightChild = rootNode.getRightChild();
			BinaryNode<T> root = removeLargest(rightChild);
			rootNode.setRightChild(root);
		}
		else
			rootNode = rootNode.getLeftChild();
		
		return rootNode;
	}
}
