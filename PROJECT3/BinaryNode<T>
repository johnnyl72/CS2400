package Homework3;

public class BinaryNode<T> {
	
	protected T data;
	protected BinaryNode<T> leftChild;
	protected BinaryNode<T> rightChild;
	protected BinaryNode<T> parent;
	
	public BinaryNode() {
		this(null); //calls next constructor
	}
	public BinaryNode(T dataPortion) {
		this(dataPortion, null, null,null); //calls next constructor
	}
	public BinaryNode(T dataPortion, BinaryNode<T> newLeftChild, BinaryNode<T> newRightChild, BinaryNode<T> initialParent) {
		data = dataPortion;
		leftChild = newLeftChild;
		rightChild = newRightChild;
		parent = initialParent;
	}
	public T getData() {
		return data;
	}
	public BinaryNode<T> getParent() {
		return parent;
	}
	public void setParent(BinaryNode<T> intialParent) {
		parent = intialParent;
	}
	public void setData(T newData) {
		data = newData;
	}
	public BinaryNode<T> getLeftChild(){
		return leftChild;
	}
	public void setLeftChild(BinaryNode<T> newLeftChild) {
		leftChild = newLeftChild;
	}
	public boolean hasLeftChild() {
		return leftChild != null;
	}
	public BinaryNode<T> getRightChild() { 
		return rightChild;
	} 
	public void setRightChild(BinaryNode<T> newRightChild) { 
		rightChild = newRightChild;
	} 
	public boolean hasRightChild() { 
		return rightChild != null;
	}

	public BinaryNode<T> copy(){
		BinaryNode<T> newRoot = new BinaryNode<>(data);
		
		if(leftChild != null)
			newRoot.setLeftChild(leftChild.copy());
		if(rightChild != null)
			newRoot.setRightChild(rightChild.copy());
		
		return newRoot;
	}
	
	public int getNumberOfNodes() { 
		int leftNumber = 0; int rightNumber = 0;
		if (leftChild != null) leftNumber = leftChild.getNumberOfNodes();
		if (rightChild != null) rightNumber = rightChild.getNumberOfNodes();
		return 1 + leftNumber + rightNumber;
	} 
	public int getHeight() { 
		return getHeight(this); // Call private getHeight 
	} 
	private int getHeight(BinaryNode<T> node) { 
		int height = 0;
		
		if (node != null) height = 1 + Math.max(getHeight(node.getLeftChild()), 
												getHeight(node.getRightChild()));
		return height;
	}
	public T getLeftmostData() { 
		if (leftChild == null) 
			return data; 
		else 
			return leftChild.getLeftmostData(); 
	} 
	public T getRightmostData() { 
		if (rightChild == null) 
			return data;
		else 
			return rightChild.getRightmostData(); 
		} 
	public BinaryNode<T> getRightmost(){
		if(rightChild != null) {
			return rightChild.getRightmost();
		}
		else {
			return this;
		}
	}
	public BinaryNode<T> getLeftmost(){
		if(leftChild != null) {
			return leftChild.getLeftmost();
		}
		else {
			return this;
		}
	}
	public BinaryNode<T> removeLeftmost() { 
		if (leftChild == null) { 
			return rightChild; 
		} 
		else { 
			leftChild = leftChild.removeLeftmost(); 
			return this; 
		} 
	}
	public BinaryNode<T> removeRightmost() { 
		if (rightChild == null) { 
			return leftChild; 
		} 
		else { 
			rightChild = rightChild.removeRightmost(); 
			return this; 
		} 
	}
	
}
