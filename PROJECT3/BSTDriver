package Homework3;

import java.util.Scanner;
public class BSTDriver {
	private static BinarySearchTree<Integer> bst;
	
	public static void promptUser() {
		
			Scanner kb= new Scanner(System.in);
			System.out.print("\nCommand? ");
			String input = kb.nextLine();
			input.toUpperCase();
			String[] inputArray = input.split(" ");
		
			switch(input.charAt(0)) {
			case 'I':
				int add = Integer.parseInt(inputArray[1]);
				insertValue(add);
				break;
			case 'D':
				int delete = Integer.parseInt(inputArray[1]);
				deleteValue(delete);
				break;
			case 'P':
				int pre = Integer.parseInt(inputArray[1]);
				findPre(pre);
				break;
			case 'S':
				int succ = Integer.parseInt(inputArray[1]);
				findSucc(succ);
				break;
			case 'E':
				System.out.println("Thank you for using my program!");
				System.exit(0);
				break;
			case 'H':
				displayP();
				break;
			
			}
			kb.close();
	}
	public static void insertValue(int inputAdd) {

		if(bst.contains(inputAdd))
			System.out.println(inputAdd +" already exists, ignore." );
		else {
			bst.add(inputAdd);
			System.out.print("\nIn-order: ");
			bst.inorderTraverse();
		}
		
		promptUser();
	}
	public static void deleteValue(int inputDelete) {
		
		if(!bst.contains(inputDelete))
			System.out.println(inputDelete + " does not exist!");
		else {
		bst.remove(inputDelete);
		System.out.print("\nIn-order: ");
		bst.inorderTraverse();
		}

		promptUser();
	}
	public static void findPre(int inputPre) {

		System.out.print("\n"+bst.getPredecessor(inputPre));
		
		promptUser();
		
	}
	public static void findSucc(int inputSucc) {
	
		System.out.print("\n"+bst.getSuccessor(inputSucc));

		promptUser();

	}
	public static void displayP() {
		 System.out.println("I Insert a value");
		 System.out.println("D Delete a value");
		 System.out.println("P Find predecessor");
		 System.out.println("S Find sucessor");
		 System.out.println("E Exit the program");
		 System.out.println("H Display this message");
		 promptUser();
	}
	public static void main(String[] args) {
		System.out.println("Please enter the initial sequence");
		Scanner kb = new Scanner(System.in);
		String input = kb.nextLine();
		String[] inputArray = input.split(" ");
		int[] entries = new int[inputArray.length];
		
		//String to Integer type
		for(int i = 0; i < inputArray.length; i++) {
			entries[i] = Integer.parseInt(inputArray[i]);
		}
	
		bst = new BinarySearchTree<>();
		for(Integer n: entries)
			bst.add(n);
		System.out.print("\nPre-order: ");
		bst.preorderTraverse();
		System.out.print("\nIn-order: ");
		bst.inorderTraverse();
		System.out.print("\nPost-order: ");
		bst.postorderTraverse();
		System.out.println("");

		promptUser();
		kb.close();
	}
}
