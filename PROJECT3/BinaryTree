package Homework3;

public class BinaryTree<T> implements BinaryTreeInterface<T> {
	
	private BinaryNode<T> root;
	
	public BinaryTree() {
		root = null;
	}// end default constructor
	public BinaryTree(T rootData) {
		root = new BinaryNode<>(rootData);
	}//end constructor
	public BinaryTree(T rootData, BinaryTree<T> leftTree, BinaryTree<T> rightTree, BinaryTree<T> initialParent) {
		privateSetTree(rootData, leftTree, rightTree, initialParent);
	}//end constructor
	public void setTree(T rootData) {
		root = new BinaryNode<>(rootData);
	}
	public void setTree(T rootData, BinaryTreeInterface<T>	leftTree, BinaryTreeInterface<T> rightTree, BinaryTreeInterface<T> intialParent) {
		privateSetTree(rootData, (BinaryTree<T>)leftTree, (BinaryTree<T>)rightTree, (BinaryTree<T>) intialParent);
	}
	private void privateSetTree(T rootData, BinaryTree<T> leftTree, 
											BinaryTree<T> rightTree, BinaryTree<T> initialParent) {
		root = new BinaryNode<>(rootData);
		
		if((leftTree != null) && !leftTree.isEmpty())
			root.setLeftChild(leftTree.root);
		if((rightTree != null) && !rightTree.isEmpty()) {
			if(rightTree != leftTree)
				root.setRightChild(rightTree.root);
			else
				root.setRightChild(rightTree.root.copy());
		}
		if ((leftTree != null) && (leftTree != this))
			leftTree.clear();
		if ((rightTree != null) && (rightTree != this))
			rightTree.clear();
	}//end privateSetTree
	
	public void setTree(T rootData, BinaryTree<T> leftTree, BinaryTree<T> rightTree) {
		root = new BinaryNode<>(rootData);
	
		if(leftTree != null)
			root.setLeftChild(leftTree.root);
		if(rightTree != null)
			root.setLeftChild(rightTree.root);
	}	
	public T getRootData() {
		if(isEmpty()) {
			System.out.println("Tree Error");
			return null;
		}
		else
			return root.getData();
	}
	public boolean isEmpty() {
		return root == null;
	}
	public void clear() {
		root = null;
	}
	protected void setRootData(T rootData) {
		root.setData(rootData);
	}
	protected void setRootNode(BinaryNode<T> rootNode) {
		root = rootNode;
	}
	protected BinaryNode<T> getRootNode(){
		return root;
	}
	public int getHeight() {
		return root.getHeight();
	}
	public int getNumberOfNodes() {
		return root.getNumberOfNodes();
	}
	// traversals via recursion
	public void preorderTraverse() { 
		preorderTraverse(root);
	}
	private void preorderTraverse(BinaryNode<T> node) {
		if(node !=null) { 
			System.out.print(node.getData() + " "); 
			preorderTraverse(node.getLeftChild()); 
			preorderTraverse(node.getRightChild()); 
			} 
	}
	public void inorderTraverse() {
		inorderTraverse(root);
	}
	private void inorderTraverse(BinaryNode<T> node) {
		if(node != null) {
		inorderTraverse(node.getLeftChild()); 
		System.out.print(node.getData() + " "); 
		inorderTraverse(node.getRightChild()); 
		}
	}
	public void postorderTraverse() {
		postorderTraverse(root);
	}
	private void postorderTraverse(BinaryNode<T> node) {
		if(node != null) {
		postorderTraverse(node.getLeftChild()); 
		postorderTraverse(node.getRightChild()); 
		System.out.print(node.getData() + " "); 
		}		
	}
	


} //end BinaryTree
